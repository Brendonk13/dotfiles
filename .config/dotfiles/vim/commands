" function! SearchCustomMarks()
"     let options = ['
" endfunction


function! MarkWindowSwap()
  let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
  "Mark destination
  let curNum = winnr()
  let curBuf = bufnr( "%" )
  exe g:markedWinNum . "wincmd w"
  "Switch to source and shuffle dest->source
  let markedBuf = bufnr( "%" )
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' curBuf
  "Switch to dest and shuffle source->dest
  exe curNum . "wincmd w"
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' markedBuf 
endfunction

" these functions come from https://stackoverflow.com/questions/2586984/how-can-i-swap-positions-of-two-open-files-in-splits-in-vim/4903681#4903681
nmap <silent> <leader>wm :call MarkWindowSwap()<CR>
nmap <silent> <leader>wp :call DoWindowSwap()<CR>



"from: https://stackoverflow.com/questions/44480829/how-to-copy-to-clipboard-in-vim-of-bash-on-windows
" just calls the native windows clip.exe function nice n simple
func! GetSelectedText()
  normal! gv"ty
  let result = getreg("t")
  return result
endfunc

"this is used by WSL
if executable("clip.exe")
  echom "clip.exe is executable"
  noremap <silent><leader>y :call system('clip.exe', GetSelectedText())<CR>
  " could/should add a cut command but who cares
  "noremap <C-X> :call system('clip.exe', GetSelectedText())<CR>gvx
endif

" this is used by my manjaro
if has('clipboard')
  nnoremap <silent><leader>y :normal! gv"+y<CR>
  vnoremap <silent><leader>y :normal! gv"+y<CR>
endif


let g:opened_neoterm = 0

function! ToggleDropDownNeoterm()
  " If neoterm is open, then save window height before closing
  " so that the next neoterm we open has the same height.
  if g:opened_neoterm

    " neoterm_buff_line is something like: 3 #a \".vimrc\" line 10
    redir => neoterm_buff_line
      silent! execute "filter /neoterm/ ls"
    redir END

    " buff num is first item when u do :ls
    let neoterm_buff_num = split(neoterm_buff_line)[0]

    " get the unique window id from the buffer number
    let neoterm_win_id = win_findbuf(neoterm_buff_num)[0]

    " get window height of open neoterm from it's window id
    let neoterm_win_height = winheight(neoterm_win_id)
    " echom \"neoterm buff num: \" . neoterm_buff_num
    " echom \"the win_id is: \" . neoterm_win_id
    " echom \"it's height: \" . neoterm_win_height

    let g:neoterm_size = neoterm_win_height

    let g:opened_neoterm = 0
    " now close the neoterm window
    Ttoggle

    " commented cuz gave up, currently you get a not-fun error when you open
    " neoterm, switch tabs, then attempt to close it

    " switch to the tab we were in when we saved the layout before restoring
    " it
    " if tabpagenr() != g:tab_when_opened
    "     tabn g:tab_when_opened
    " endif
    " let l:num_tabs = Num_tabs()
    " if l:num_tabs < g:tab_when_opened
    "     echom "Trying to restore layout to a tab which no longer exists"
    " else
    call s:restore_buffer_layout()
    " endif
  else
    let g:opened_neoterm = 1
    " let g:tab_when_opened = tabpagenr()
    call s:save_buffer_layout()
    Ttoggle
  endif
endfunction

" function! Num_tabs()
"     let l:tab = 0
"     while l:tab < tabpagenr('$')
"       let l:tab += 1
"     endwhile
"     return l:tab
" endfunction

command! SaveBufferLayout call s:save_buffer_layout()
command! RestoreBufferLayout call s:restore_buffer_layout()

function s:save_buffer_layout() abort
  let s:buf_layout = winlayout()
  let s:resize_cmd = winrestcmd()
  call s:add_buf_to_layout(s:buf_layout)
endfunction

" add bufnr to leaf
function s:add_buf_to_layout(layout) abort
  if a:layout[0] ==# 'leaf'
    call add(a:layout, winbufnr(a:layout[1]))
  else
    for child_layout in a:layout[1]
      call s:add_buf_to_layout(child_layout)
    endfor
  endif
endfunction

function s:restore_buffer_layout() abort
  if !has_key(s:, 'buf_layout')
    return
  endif

  " create clean window
  new
  wincmd o

  " recursively restore buffers
  call s:apply_layout(s:buf_layout)

  " resize
  exe s:resize_cmd
endfunction

function s:apply_layout(layout) abort

  if a:layout[0] ==# 'leaf'
    if bufexists(a:layout[2])
      exe printf('b %d', a:layout[2])
    endif
  else

    " split cols or rows, split n-1 times
    let split_method = a:layout[0] ==# 'col' ? 'rightbelow split' : 'rightbelow vsplit'
    let wins = [win_getid()]
    for child_layout in a:layout[1][1:]
      exe split_method
      let wins += [win_getid()]
    endfor

    " recursive into child windows
    for index in range(len(wins) )
      call win_gotoid(wins[index])
      call s:apply_layout(a:layout[1][index])
    endfor

  endif
endfunction

" function! Save_window_dimensions()
"     let t:bufs = tabpagebuflist(tabpagenr())
"     let t:buff_heights = []
"     let t:buff_widths = []
"     for buf_num in t:bufs
"         " store the height, width of all buffers
"         call extend(t:buff_heights, winheight(buf_num))
"         call extend(t:buff_widths, winwidth(buf_num))
"     endfor
" endfunction

" --------------------------- FZF commands --------------------------------





" Default FZF options with bindings to match layout and select all + none
" let $FZF_DEFAULT_OPTS = '--layout=default --reverse' .
"   \ ' --info inline' .
"   \ ' --bind ctrl-e:preview-down,ctrl-y:preview-up,ctrl-u:preview-page-up,ctrl-d:preview-page-down,tab:toggle+up,shift-tab:toggle+down' .
"   \ ' --preview "bat --style=numbers,changes --color always {2..-1} | head -200" --expect=ctrl-v,ctrl-x'


" Defines search command for :Files
" let $FZF_DEFAULT_COMMAND='rg --column --line-number --no-heading --color=always --smart-case --files --hidden'

" Todo: add devicons/git status to :Gfiles

" command! -bang -nargs=* Rg
"     \ call fzf#vim#grep(
"     \   'rg --column --line-number --no-heading --color=always --colors "path:fg:190,220,255" --colors "line:fg:128,128,128" --smart-case '.shellescape(<q-args>), 1,
"     \   fzf#vim#with_preview(), <bang>0)
" cnoremap RG Rg<CR>

command! -bang -nargs=* RgCurrentBufferDir
    \ cd %:p:h |
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always --colors "path:fg:190,220,255" --colors "line:fg:128,128,128" --smart-case '.shellescape(<q-args>), 1,
    \   fzf#vim#with_preview({'dir': expand('%:p:h')}), <bang>0)

command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --colors "path:fg:190,220,255" --colors "line:fg:128,128,128" --smart-case '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)


command! -bang -nargs=* Gthing
    \ call FzfFilePreview(1)
command! -bang -nargs=* Thing
    \ call FzfFilePreview(0)

" whyyyyyyyyy does it go to wrong file !!!!!!!!!!!!!


" Files + devicons + floating fzf
function! FzfFilePreview(curr_buff)
  let l:fzf_files_options = '--preview "bat --style=numbers,changes --color always {3..-1} | head -128" --expect=ctrl-v,ctrl-x'
  let s:files_status = {}
  " let l:curr_buff_dir = a:curr_buff
  " let search_dir = ' ' . (a:curr_buff == 1 ? fnameescape(expand('%:p:h')) : systemlist('git rev-parse --show-toplevel')[0]) . '/'
  " echom search_dir
  " let s:cmd = (a:curr_buff == 1 ? $FZF_DEFAULT_COMMAND . ' $(realpath ' . search_dir . ')"' : $FZF_DEFAULT_COMMAND)
  " let s:cmd = $FZF_DEFAULT_COMMAND . search_dir
  let s:cmd = a:curr_buff
  echom s:cmd

  function! s:cacheGitStatus()
    let l:gitcmd = 'git -c color.status=false -C ' . $PWD . ' status -s'
    let l:statusesStr = system(l:gitcmd)
    let l:statusesSplit = split(l:statusesStr, '\n')
    for l:statusLine in l:statusesSplit
      let l:fileStatus = split(l:statusLine, ' ')[0]
      let l:fileName = split(l:statusLine, ' ')[1]
      let s:files_status[l:fileName] = l:fileStatus
    endfor
  endfunction

  function! s:files()
    call s:cacheGitStatus()
    let git_dir = system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
    " echom git_dir
    if git_dir != ''
    " let l:files = (l:curr_buff_dir == 1 ? glob : '')
        if s:cmd == 1
            exec 'cd' fnameescape(fnamemodify(finddir('.git',
              \ escape(expand('%:p:h'), ' ') . ';'), ':h'))
            " cd system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
            let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
        else
            cd %:p:h
            let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
        endif
    else
        cd %:p:h
        let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
    endif

    return s:prepend_indicators(l:files)
  endfunction

  function! s:prepend_indicators(candidates)
    return s:prepend_git_status(s:prepend_icon(a:candidates))
  endfunction

  function! s:prepend_git_status(candidates)
    let l:result = []
    for l:candidate in a:candidates
      let l:status = ''
      let l:icon = split(l:candidate, ' ')[0]
      let l:filePathWithIcon = split(l:candidate, ' ')[1]

      let l:pos = strridx(l:filePathWithIcon, ' ')
      let l:file_path = l:filePathWithIcon[pos+1:-1]
      if has_key(s:files_status, l:file_path)
        let l:status = s:files_status[l:file_path]
        call add(l:result, printf('%s %s %s', l:status, l:icon, l:file_path))
      else
        " printf statement contains a load-bearing unicode space
        " the file path is extracted from the list item using {3..-1},
        " this breaks if there is a different number of spaces, which
        " means if we add a space in the following printf it breaks.
        " using a unicode space preserves the spacing in the fzf list
        " without breaking the {3..-1} index
        call add(l:result, printf('%s %s %s', ' ', l:icon, l:file_path))
      endif
    endfor

    return l:result
  endfunction

  function! s:prepend_icon(candidates)
    let l:result = []
    for l:candidate in a:candidates
      let l:filename = fnamemodify(l:candidate, ':p:t')
      let l:icon = WebDevIconsGetFileTypeSymbol(l:filename, isdirectory(l:filename))
      call add(l:result, printf('%s %s', l:icon, l:candidate))
    endfor

    return l:result
  endfunction

  function! s:edit_file(lines)
    if len(a:lines) < 2 | return | endif

    let l:cmd = get({'ctrl-x': 'split',
                 \ 'ctrl-v': 'vertical split',
                 \ 'ctrl-t': 'tabe'}, a:lines[0], 'e')

    for l:item in a:lines[1:]
      let l:pos = strridx(l:item, ' ')
      let l:file_path = l:item[pos+1:-1]
      execute 'silent '. l:cmd . ' ' . l:file_path
    endfor
  endfunction

  let transformer = "| awk -F: 'BEGIN { OFS = FS } {$3 = $3 \":shortened-path:\" $2 \":\" $3; print}'"

call fzf#run({
        \ 'source': <sid>files(),
        \ 'sink*':   function('s:edit_file'),
        \ 'options': '-m --prompt Files\> ' . l:fzf_files_options,
        \ 'window': 'call '..s:snr..'fzf_window(0.92, 0.75, "Comment")'})
        " \ 'down':    '40%',
        " \ 'window': 'call FloatingFZF()'})


endfunction

  " if a:is_grep
  "     call fzf#vim#grep(
  "                \   "rg --column --line-number --no-heading --color=always --smart-case "..shellescape(<sid>files())..transformer,
  "                \   1,
  "                \   { 'options': '--delimiter=: --with-nth=4..' },
  "                \   <bang>0)
  " else
  "     echom 'files'
  "       call fzf#vim#grep(
  "           \   "rg --files --column --line-number --no-heading --color=always --smart-case "..<sid>files()..transformer,
  "           \   1,
  "           \   { 'options': '--delimiter=: --with-nth=4..' },
  "           \   <bang>0)

        " \ 'window': 'call '..s:snr..'fzf_window(0.92, 0.75, "Comment")'})

  " endif



" -------------------- define popup window -----------------------------------

" popup windows, stolen from a long ways down this: https://github.com/junegunn/fzf.vim/issues/821

fu s:snr() abort
    return matchstr(expand('<sfile>'), '.*\zs<SNR>\d\+_')
endfu
let s:snr = get(s:, 'snr', s:snr())
let g:fzf_layout = {'window': 'call '..s:snr..'fzf_window(0.92, 0.7, "Comment")'}

fu s:fzf_window(width, height, border_highlight) abort
    let width = float2nr(&columns * a:width)
    let height = float2nr(&lines * a:height)
    let row = float2nr((&lines - height) / 2)
    let col = float2nr((&columns - width) / 2)
    let top = '┌' . repeat('─', width - 2) . '┐'
    let mid = '│' . repeat(' ', width - 2) . '│'
    let bot = '└' . repeat('─', width - 2) . '┘'
    let border = [top] + repeat([mid], height - 2) + [bot]
    if has('nvim')
        let frame = s:create_float(a:border_highlight, {
            \ 'row': row,
            \ 'col': col,
            \ 'width': width,
            \ 'height': height,
            \ })
        call nvim_buf_set_lines(frame, 0, -1, v:true, border)
        call s:create_float('Normal', {
            \ 'row': row + 1,
            \ 'col': col + 2,
            \ 'width': width - 4,
            \ 'height': height - 2,
            \ })
        exe 'au BufWipeout <buffer> bw '..frame
    else
        let frame = s:create_popup_window(a:border_highlight, {
            \ 'line': row,
            \ 'col': col,
            \ 'width': width,
            \ 'height': height,
            \ 'is_frame': 1,
            \ })
        call setbufline(frame, 1, border)
        call s:create_popup_window('Normal', {
            \ 'line': row + 1,
            \ 'col': col + 2,
            \ 'width': width - 4,
            \ 'height': height - 2,
            \ })
    endif
endfu

fu s:create_float(hl, opts) abort
    let buf = nvim_create_buf(v:false, v:true)
    let opts = extend({'relative': 'editor', 'style': 'minimal'}, a:opts)
    let win = nvim_open_win(buf, v:true, opts)
    call setwinvar(win, '&winhighlight', 'NormalFloat:'..a:hl)
    return buf
endfu

fu s:create_popup_window(hl, opts) abort
    if has_key(a:opts, 'is_frame')
        let id = popup_create('', #{
            \ line: a:opts.line,
            \ col: a:opts.col,
            \ minwidth: a:opts.width,
            \ minheight: a:opts.height,
            \ zindex: 50,
            \ })
        call setwinvar(id, '&wincolor', a:hl)
        exe 'au BufWipeout * ++once call popup_close('..id..')'
        return winbufnr(id)
    else
        let buf = term_start(&shell, #{hidden: 1})
        call popup_create(buf, #{
            \ line: a:opts.line,
            \ col: a:opts.col,
            \ minwidth: a:opts.width,
            \ minheight: a:opts.height,
            \ zindex: 51,
            \ })
        exe 'au BufWipeout * ++once bw! '..buf
    endif
endfu

