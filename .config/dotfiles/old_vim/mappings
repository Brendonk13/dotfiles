let mapleader = " "
let maplocalleader = " "


" format a line, add this to autocmds for text files
nnoremap =al mt^~I- <esc>`t





"           note that <CR> by itself is not used in normal mode!!!
"-- here do: map <expr> <CR> empty(&buftype) ? '@@' : '<CR>'
" so that <CR> works on special buffers like qf window!!
" --- use the replay plugin if ever map <CR> @@

"another dece one is <S-Tab>
" also d<CR> and most char<CR> combos are free space!!
" look into the usefulness of current K command!
" currently never use U, and replace mode is replacable
" the Z cmd not used, but theres a delay when mapping cuz of ZZ cmd
" would be sickkk if i could get rid of that delay (kinda)

" allow enter key in normal mode use leader key so i don't fuck with quickfix :cw
" nnoremap <leader><CR> a<CR><esc>
" nnoremap <leader><BS> i<BS><esc>
" <CR> would be much better as a function which moved to beginning of word then i<CR>
" iff in cursor in the middle of word

" <leader>s used by neoterm send as operator
nnoremap <leader>S :source $MYVIMRC<CR>


" goat mapping -- can now add count to @@
nnoremap Q @@

" the backticks are way more useful marks than quotes
onoremap ' `
onoremap ` '

" I make things upper case so much more than the opposite.
nnoremap gu gU
nnoremap gU gu

nnoremap guu gUU
nnoremap gUU guu

vnoremap gu gU
vnoremap gU gu

"vnoremap guu gUU
"vnoremap gUU guu


" backtick is a way better mark
nnoremap ' `
nnoremap ` '

" from damian conway's vim talk
vnoremap <expr> ++ VMATH_YankAndAnalyse()
nnoremap ++  vip++

"should probly change these to <leader>__t to be consistent with my other normal mode splits
nnoremap <silent> <leader>wt :terminal<CR>i
nnoremap <silent> <leader>vt :vs<bar>:terminal<CR>i
nnoremap <silent> <leader>st :sp<bar>:terminal<CR>i
nnoremap <silent> <leader>tt :tabnew<bar>:terminal<CR>i


nnoremap <silent> <C-s> :w<CR>


" makes sense, even suggested in help!
nnoremap Y y$

"mnemonic:  yank set path --- needs a modifiable split above or to right!!
" yank the line, move windows, paste it, replace spaces with ? wildcard
" cut line, add to path, then rand search to make shit not show up!
nnoremap ysp "ty$<C-w>t"tp:s/\v /\\\\\\ /<CR>0"tD:set path+=<C-r>t<CR>/rAnD0MsTrInG$<esc>:<esc>


" another day, mnemonic: yank add subdirectories
"nnoremap yas "tyy<C-w>t"tp:s/\v\ /\?/<CR>0"tdd:set path+=<C-r>t<CR>/RAnD0MsTrInG$<esc>


nnoremap ; :
nnoremap ;; ;


" Open and close folds with Enter
nnoremap <expr> <cr>   foldlevel(line('.'))  ? "za" : "\<cr>"


" need to map something to save a file and then swithc down buffers to a
" terminal and enter it as well
"nnoremap 


" should make this into a function at some point which pastes at the correct indentation level
" can just get the current column number
"nnoremap <leader>p mto<esc>p`t
"nnoremap <leader>P mtO<esc>p`t
nnoremap <leader>p echom 'use ]p shit'
nnoremap <leader>P echom 'use [P shit'

" the ]p shit is native and much smarter than my hacky thing



" saner searching
nnoremap g; g;zz
nnoremap g, g,zz


" makes you go down line wise regardless of wrapping.
nnoremap j gj
nnoremap k gk

"http://vimcasts.org/episodes/the-edit-command/
" can automatically expand curr buffer's dir_path with %% anywhere on c-line!!
"  These are hella useful if have mult files in mult dir's open already
cnoremap %% <C-R>=fnameescape(expand('%:p:h')).'/'<cr>
nmap <leader>we :e %%
nmap <leader>se :sp %%
nmap <leader>ve :vs %%
nmap <leader>te :tabe %%

" these^^^ muuuust be map, not noremap!

set wildcharm=<C-z>
cnoremap Bd :ls<CR>:      bd<space><C-z>
" have spaces in order to see status ie hidden/active

" deletes all tabs in current file, nice cuz i have listchar set
" mnemonic: Delete tab
nnoremap <leader>d<tab> :%s/\v^\s+$//<CR>
" NOTE: USE THE :retab COMMAND INSTEAD !!!!!!!!!!!!!!


" navigate by staged/unstaged changes
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" http://learnvimscriptthehardway.stevelosh.com/chapters/15.html\   has nice operator pending maps 
" https://medium.com/@sidneyliebrand/a-collection-of-vim-key-binds-4d227c9a455


" would be nice to have a drop down general use terminal for traversing purposes
" was thinking it would be nice to have one per tab
"nnoremap <silent>,<CR> :call ()<cr>


nnoremap <silent><leader><CR> :call ToggleDropDownNeoterm()<cr>
" nnoremap <silent><leader><CR> :Ttoggle<CR>
vnoremap <silent><leader>ss :TREPLSendSelection<CR>
" this next one defines an operator which I can use to send selections to neoterm
nmap <silent><leader>s <Plug>(neoterm-repl-send)

"----------------------------------------------- WINDOW MANAGEMENT -------------------------------------------------
" maybe I will change this to <C-<lt>> as a normal mode mapping ... this is barely less keystrokes, just nice not to think about numbers
nnoremap <C-w>> <C-w>20>
nnoremap <C-w>2> <C-w>40>
" other direction now
nnoremap <C-w>< <C-w>20<
nnoremap <C-w>2< <C-w>40<


" will use this for my \"drop down\" neoterm
nnoremap <M-j> <C-w>3-
nnoremap <M-k> <C-w>3+

" easier maximization of windows!!
nnoremap <C-w>- <C-w>_
nnoremap <C-w>\ <C-w><bar>

" make current buffer max size
nnoremap <leader>m <C-w>_<C-w><bar>

" easier window switching
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


" easy switch back to previous buffer
nnoremap <leader><leader> <C-^>


" this >> nerdtree (add netrw_liststyle=3 and behold) --  needs nmap
nmap <leader>ls :vert topleft 22vs %%<CR>
" need to figure out netrw a bit tho ..    -- like how to make close parent dir and make another "root"

" map :only to <leader>o
nnoremap <silent> <leader>o :only<CR>
" close windows easily!!
nnoremap <silent> <leader>c :close<CR>

" deletes current buffer while preserving layout.
nnoremap <Leader>bd :bp<CR>:bd#<CR>


"------------------------------------------------ END WINDOW MANAGEMENT ------------------------------------------------

" note that there are hella commands possible from with insert mode, check index!!



"------------------------------------------------------- SEARCH ---------------------------------------------------------
"nmap / ms/
"nmap ? ms?
" my excuse for not adding these before was that I'd break nerdtree/ some other plugin i'm not using
" and premature optimization is the death of all.. besides <leader>/ is unrememberable
"nnoremap / ms/
"nnoremap ? ms?

" these ^ didn't work, need to change loupe function to do: ms<bar>fxnCall

nnoremap <leader>wf :find<space>
nnoremap <leader>sf :sfind<space>
nnoremap <leader>vf :vert sf<space>
nnoremap <leader>tf :tabfind<space>

" faster spamming of n. , can optionally add a count also!
"nnoremap \ :norm n.<CR>

" now have this mapping for bash && vim
"nnoremap <C-p> :FZF<CR>

" don't really like c-p since I accidently press lots when trying to esc.


"------------------------------------------------------ END SEARCH -----------------------------------------------------

"------------------------------------------------------ VISUAL MODE --------------------------------------------------------
" this visually selects most recent paste/insert mode session
nnoremap gV `[v`]

" allow '.' and '@' to work in VISUAL MODE
" note these don't work with recursive macros, v tempted to get wincent's
" plugin which reassigns <CR> to @@ but runs most recently created OR recently used AND works with recursive macros
vnoremap . :norm .<CR>
vnoremap Q :norm @@<CR>


" keep selection after shifting
vnoremap < <gv
vnoremap > >gv

vnoremap j gj
vnoremap k gk


"------------------------------------------------------ INSERT MODE -------------------------------------------------------
" neeeeeeeed to make put all these bs things in a fold, i even know to use mkview..
" force non-usage of arrow keys
imap <Up>    <Nop>
imap <Down>  <Nop>
imap <Left>  <Nop>
imap <Right> <Nop>

" allow for moving in insert mode
inoremap <C-j> <Down>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-k> <Up>

" this inserts a line below me from insert mode
" use '.' since I'm already using this for omni and I want minimal "lag keys"
inoremap ;<CR> <esc>mto<esc>`ta
inoremap ;<BS> <esc>mt<down>0i<BS><esc>`ta
" so now enter, bs operate on lines above me, the dot variant acts on lines below current!


" for the rare times you want to stay in insert mode
inoremap <C-e> <C-o>$
inoremap <C-b> <C-o>^

" ---  omnicomplete mappings-----
inoremap <silent> ;; <C-x><C-o>

" this still brings up a err msg maybe the solution is to make a function ...


" all of these omnicomplete mappings are from https://vim.fandom.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

"note that above started with :inoremap

inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
\ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" if I want preview window to stay open after
" then change to InsertLeave
augroup omniComplete
    autocmd!
    autocmd CompleteDone * pclose
augroup END

"I need a autocmd that does <C-n><C-p> every time I press a letter? so that I can view a preview always
" what might be better tho is so just have a key mapped to <C-n><C-p> ... or maybe just press those keystrokes when this is desired behavior

" how can I turn off the E764 error which says omnifunc not set when I press '.' in insert mode.

" Global line completion (not just open buffers. ripgrep required.)
inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
    \ 'prefix': '^.*$',
    \ 'source': 'rg -n ^ --color always',
    \ 'options': '--ansi --delimiter : --nth 3..',
    \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))


" frequently want to capitalize a word I just typed
inoremap <C-u> <esc>gUiwea

" frequently find myself knowing I will repeat a word as I type it
" besides, C-c is useless in insert mode
inoremap <C-y> <esc>"iyiwea


" mnemonic: Capitalize
inoremap <C-c> <esc>mtb~`ta


" ------------------------------------------------- abbreviations!! ----------------------------------------------------------------

inoreabbrev slef self


cnoreabbrev makrs marks
" set path+='~/new_dotfiles/vim/plugins/remote/better_defaults/vim-abolish/'
" let g:abolish_save_file='~/new_dotfiles/vim/plugins/remote/better_defaults/vim-abolish/abolishes.vim'

" ------------------------------------------------- END abbreviations!! ----------------------------------------------------------------

"-------------------------------------------------------- plugin mappings ---------------------------------------------------------------------

" Better command history with q:
command! CmdHist call fzf#vim#command_history({'bottom': '10'})
nnoremap q: :CmdHist<CR>

" Better search history
command! QHist call fzf#vim#search_history({'bottom': '10'})
nnoremap q/ :QHist<CR>


" normal is to search from the current buffer's directory.
" nnoremap <silent> <M-f> :call FzfFilePreview(1,0)<CR>
" nnoremap <silent> <leader><M-f> :call FzfFilePreview(0,0)<CR>
" nnoremap <silent> <M-f> :call FzfFilePreview(curr_buff:true) <C-R>=fnameescape(expand('%:p:h')).'/'<CR><CR>

" nnoremap <silent> <M-r> :call FzfFilePreview(1,1)<CR>
" grep all files in curr buffer's dir

" nnoremap <silent> <M-r> :RgCurrentBufferDir<CR>
" grep project with preview
nnoremap <silent> <leader><M-r> :GGrep<CR>


" nnoremap <silent> <M-f> :FzfPreviewProjectFiles<CR>
let g:fzf_preview_use_dev_icons = 1
let g:fzf_preview_lines_command = 'bat --color=always --style=grid --theme=ansi-dark --plain'
let g:fzf_binary_preview_command = 'echo "{} is a binary file"'
" let g:fzf_preview_filelist_postprocess_command = 'xargs -d "\n" ls -U --color'
let g:fzf_preview_filelist_postprocess_command = 'xargs -d "\n" exa --color=always'
let g:fzf_preview_floating_window_winblend = 4
" let g:fzf_preview_grep_cmd = 'rg --line-number --no-heading --smart-case --files --hidden --iglob "!.DS_Store" --iglob "!.git"'
" let g:fzf_preview_directory_files_command = 'rg --files --hidden --column --line-number --no-heading  --smart-case --color=always'
" let g:fzf_preview_fzf_color_option = ' --colors "path:fg:190,220,255" --colors "line:fg:128,128,128"'
" let g:fzf_preview_grep_cmd = 'rg --line-number --no-heading --color=always --colors "path:fg:190,220,255" --colors "line:fg:128,128,128" --smart-case'

" let g:rooter_manual_only = 1
" let g:rooter_patterns = ['.git/', 'tags']
" let g:rooter_silent_chdir = 1
" let g:rooter_change_directory_for_non_project_files = 'current'

" nnoremap <silent> <M-r> :Rooter<CR> <bar> :<C-u>FzfPreviewProjectGrep<space>

" search thru all files with unstaged changes
nnoremap <silent> <M-g> :<C-u>FzfPreviewGitStatus<CR>
" nnoremap <silent> <M-g> :Rooter<CR> <bar> :<C-u>FzfPreviewGitStatus<CR>

"mnemonic: meta-buffers
" nnoremap <silent> <M-b> :FzfPreviewAllBuffers<CR>
nnoremap <silent> <M-b> :Buffers<CR>


command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)

" function! s:find_files()
"     let git_dir = system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
"     echom git_dir
"     if git_dir != ''
"         " execute 'FzfPreviewDirectoryFiles' git_dir
"         execute 'FzfPreviewFromResources directory'
"     else
"         lcd %:p:h
"         execute 'FzfPreviewDirectoryFiles'
"     endif
" endfunction
" command! FromRootIfExists execute s:find_files()
" nmap <silent> 0 :FzfPreviewDirectoryFiles <C-R>=expand('%:h')<CR><CR>

" search files in current project, rooter looks for a .git dir, then tags file
" to find it
" nnoremap <silent> <leader><M-f> :<C-u>FzfPreviewFromResources<space>directory<CR>
" function! CdIfNeed()
"     let git_dir = system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
"     echom git_dir
"     if git_dir != ''
"         exec 'cd' git_dir
"     endif
" endfunction

" Todo: change these to lcd ???
function! CdIfNeed()
    silent! cd %:p:h | silent! cd `git rev-parse --show-toplevel`
endfunction
" appending leader searches project files
nnoremap <silent> <leader><M-f> :call CdIfNeed()<CR>:GFiles<CR>


" search files in current directory
" nnoremap <silent> <M-f> :cd %:p:h<CR><bar>:<C-u>FzfPreviewFromResources<space>directory<CR>

nnoremap <silent> <M-f> :Files %:p:h<CR>

" can pass in regex to Ripgrep with preview window
nnoremap <silent> <M-r> :cd %:p:h<CR><bar>:RG<CR>

nnoremap <silent> <leader><M-r> :call CdIfNeed()<CR><bar>:RG<CR>

"
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --colors "path:fg:190,220,255" --colors "line:fg:128,128,128" --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

" This command allows me to pass in the same parameters on the command line!!!
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)


"mnemonic: meta-current
nnoremap <M-c> :BLines<CR>

"mnemonic: meta-windows   -- this just searches file name of open windows 
"nnoremap <M-w> :Windows<CR>

" mnemonic: meta-help
nnoremap <M-h> :Helptags<CR>

"don't like that these are such big windows so far:(

xmap <leader>ga <Plug>(EasyAlign)

" this allows for easy alignment based on searching
xmap ga :EasyAlign //<left>

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" nmap <leader>ga :EasyAlign


"-------------------------------------------------------- TERMINAL ----------------------------------------------------------------------------


if has('nvim')
  " so for some reason these alt mappings don't work consistently
  " but working so far for escaping terminal mode, can delete others probly
  tnoremap <M-[> <C-\><C-n>
  " using meta key allows for the esc key to work in terminal mode still

  " Terminal mode:
  tnoremap <M-h> <c-\><c-n><c-w>h
  tnoremap <M-j> <c-\><c-n><c-w>j
  tnoremap <M-k> <c-\><c-n><c-w>k
  tnoremap <M-l> <c-\><c-n><c-w>l

  " currently don't even use nu, rnu but may as well keep.
  augroup term
  autocmd!
  autocmd TermOpen * setlocal nonumber norelativenumber
  augroup END

endif

"-------------------------------------------------------- END TERMINAL ----------------------------------------------------------------------------
