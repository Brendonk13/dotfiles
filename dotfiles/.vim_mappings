let mapleader = " "

"           note that <CR> by itself is not used in normal mode!!!
"-- here do: map <expr> <CR> empty(&buftype) ? '@@' : '<CR>'
" so that <CR> works on special buffers like qf window!!
" --- use the replay plugin if ever map <CR> @@

"another dece one is <S-Tab>
" also d<CR> and most char<CR> combos are free space!!
" look into the usefulness of current K command!
" currently never use U, and replace mode is replacable
" the Z cmd not used, but theres a delay when mapping cuz of ZZ cmd
" would be sickkk if i could get rid of that delay (kinda)

" allow enter key in normal mode use leader key so i don't fuck with quickfix :cw
nnoremap <leader><CR> a<CR><esc>
nnoremap <leader><BS> i<BS><esc>
" <CR> would be much better as a function which moved to beginning of word then i<CR>
" iff in cursor in the middle of word

nnoremap <leader>s :source $MYVIMRC<CR>


" goat mapping -- can now add count to @@
nnoremap Q @@

" the backticks are way more useful marks than quotes
onoremap ' `
onoremap ` '

nnoremap ' `
nnoremap ` '

" from damian conway's vim talk
vnoremap <expr> ++ VMATH_YankAndAnalyse()
nnoremap ++  vip++

"should probly change these to <leader>__t to be consistent with my other normal mode splits
nnoremap <silent> <leader>wt :terminal<CR>i
nnoremap <silent> <leader>vt :vs<bar>:terminal<CR>i
nnoremap <silent> <leader>st :sp<bar>:terminal<CR>i
nnoremap <silent> <leader>tt :tabnew<bar>:terminal<CR>i



" makes sense, even suggested in help!
nnoremap Y y$

"mnemonic:  yank set path --- needs a modifiable split above or to right!!
" yank the line, move windows, paste it, replace spaces with ? wildcard
" cut line, add to path, then rand search to make shit not show up!
nnoremap ysp "ty$<C-w>t"tp:s/\v /\\\\\\ /<CR>0"tD:set path+=<C-r>t<CR>/rAnD0MsTrInG$<esc>:<esc>


" another day, mnemonic: yank add subdirectories
"nnoremap yas "tyy<C-w>t"tp:s/\v\ /\?/<CR>0"tdd:set path+=<C-r>t<CR>/RAnD0MsTrInG$<esc>


nnoremap ; :
nnoremap ;; ;


" should make this into a function at some point which pastes at the correct indentation level
" can just get the current column number
nnoremap <leader>p mto<esc>p`t
nnoremap <leader>P mtO<esc>p`t

" saner searching
nnoremap g; g;zz
nnoremap g, g,zz


" makes you go down line wise regardless of wrapping.
nnoremap j gj
nnoremap k gk

"http://vimcasts.org/episodes/the-edit-command/
" can automatically expand curr buffer's dir_path with %% anywhere on c-line!!
"  These are hella useful if have mult files in mult dir's open already
cnoremap %% <C-R>=fnameescape(expand('%:p:h')).'/'<cr>
nmap <leader>we :e %%
nmap <leader>se :sp %%
nmap <leader>ve :vs %%
nmap <leader>te :tabe %%

" these^^^ muuuust be map, not noremap!

" http://learnvimscriptthehardway.stevelosh.com/chapters/15.html\   has nice operator pending maps 
" https://medium.com/@sidneyliebrand/a-collection-of-vim-key-binds-4d227c9a455


" would be nice to have a drop down general use terminal for traversing purposes
" was thinking it would be nice to have one per tab
"nnoremap <silent>,<CR> :call ()<cr>


nnoremap <silent><leader><CR> :call ToggleDropDownNeoterm()<cr>
vnoremap <silent><leader>ss :TREPLSendSelection<CR>
" this next one defines an operator which I can use to send selections to neoterm
nmap <silent><leader>s <Plug>(neoterm-repl-send)

"---------- WINDOW MANAGEMENT ------------
" maybe I will change this to <C-<lt>> as a normal mode mapping ... this is barely less keystrokes, just nice not to think about numbers
nnoremap <C-w>> <C-w>20>
nnoremap <C-w>2> <C-w>40>
" other direction now
nnoremap <C-w>< <C-w>20<
nnoremap <C-w>2< <C-w>40<


" will use this for my "drop down" neoterm
nnoremap <M-j> <C-w>3-
nnoremap <M-k> <C-w>3+

" easier maximization of windows!!
nnoremap <C-w>- <C-w>_
nnoremap <C-w>\ <C-w><bar>


" easier window switching
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" this >> nerdtree (add netrw_liststyle=3 and behold) --  needs nmap
nmap <leader>ls :vert topleft 22vs %%<CR>
" need to figure out netrw a bit tho ..    -- like how to make close parent dir and make another "root"

" map :only to <leader>o
nnoremap <silent> <leader>o :only<CR>
" close windows easily!!
nnoremap <silent> <leader>c :close<CR>

"----------- END WINDOW MANAGEMENT -----------

" note that there are hella commands possible from with insert mode, check index!!



"------------------ SEARCH --------------------
nmap / ms/
nmap ? ms?
" my excuse for not adding these before was that I'd break nerdtree/ some other plugin i'm not using
" and premature optimization is the death of all.. besides <leader>/ is unrememberable
"nnoremap / ms/
"nnoremap ? ms?

" these ^ didn't work, need to change loupe function to do: ms<bar>fxnCall

nnoremap <leader>wf :find<space>
nnoremap <leader>sf :sfind<space>
nnoremap <leader>vf :vert sf<space>
nnoremap <leader>tf :tabfind<space>

" faster spamming of n. , can optionally add a count also!
"nnoremap \ :norm n.<CR>

" now have this mapping for bash && vim
"nnoremap <C-p> :FZF<CR>

" don't really like c-p since I accidently press lots when trying to esc.


"----------------- END SEARCH ----------------

"----------------- VISUAL MODE -------------------
" this visually selects most recent paste/insert mode session
nnoremap gV `[v`]

" allow '.' and '@' to work in VISUAL MODE
" note these don't work with recursive macros, v tempted to get wincent's
" plugin which reassigns <CR> to @@ but runs most recently created OR recently used AND works with recursive macros
vnoremap . :norm .<CR>
vnoremap Q :norm @@<CR>

"----------------- INSERT MODE ------------------
" neeeeeeeed to make put all these bs things in a fold, i even know to use mkview..
" force non-usage of arrow keys
imap <Up>    <Nop>
imap <Down>  <Nop>
imap <Left>  <Nop>
imap <Right> <Nop>

" allow for moving in insert mode
inoremap <C-j> <Down>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-k> <Up>

" this inserts a line below me from insert mode
" use '.' since I'm already using this for omni and I want minimal "lag keys"
inoremap ;<CR> <esc>mto<esc>`ta
inoremap ;<BS> <esc>mt<down>0i<BS><esc>`ta
" so now enter, bs operate on lines above me, the dot variant acts on lines below current!


" for the rare times you want to stay in insert mode
inoremap <C-e> <C-o>$
inoremap <C-b> <C-o>^

" ---  omnicomplete mappings-----
inoremap <silent> ;; <C-x><C-o>

" this still brings up a err msg maybe the solution is to make a function ...


" all of these omnicomplete mappings are from https://vim.fandom.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

"note that above started with :inoremap

inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
\ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" if I want preview window to stay open after
" then change to InsertLeave
autocmd CompleteDone * pclose

"I need a autocmd that does <C-n><C-p> every time I press a letter? so that I can view a preview always
" what might be better tho is so just have a key mapped to <C-n><C-p> ... or maybe just press those keystrokes when this is desired behavior

" how can I turn off the E764 error which says omnifunc not set when I press '.' in insert mode.


" frequently want to capitalize a word I just typed
inoremap <C-u> <esc>gUiwea

" frequently find myself knowing I will repeat a word as I type it
" besides, C-c is useless in insert mode
inoremap <C-y> <esc>"iyiwea

" ------------ abbreviations!! ---------------------------

inoreabbrev slef self


cnoreabbrev makrs marks

" ------------ END abbreviations!! ---------------------------

"------------------- plugin mappings --------------------------------

" Better command history with q:
command! CmdHist call fzf#vim#command_history({'bottom': '10'})
nnoremap q: :CmdHist<CR>

" Better search history
command! QHist call fzf#vim#search_history({'bottom': '10'})
nnoremap q/ :QHist<CR>

nnoremap <M-f> :FZF<CR>

"mnemonic: meta-buffers
nnoremap <M-b> :Buffers<CR>

"mnemonic: meta-current
nnoremap <M-c> :BLines<CR>

"mnemonic: meta-windows   -- this just searches file name of open windows 
"nnoremap <M-w> :Windows<CR>

" mnemonic: meta-help
nnoremap <M-h> :Helptags<CR>

"don't like that these are such big windows so far:(

"------------------- TERMINAL ---------------------------------------


if has('nvim')
  " so for some reason these alt mappings don't work consistently
  " but working so far for escaping terminal mode, can delete others probly
  tnoremap <M-[> <C-\><C-n>
  " using meta key allows for the esc key to work in terminal mode still

  " Terminal mode:
  tnoremap <M-h> <c-\><c-n><c-w>h
  tnoremap <M-j> <c-\><c-n><c-w>j
  tnoremap <M-k> <c-\><c-n><c-w>k
  tnoremap <M-l> <c-\><c-n><c-w>l

  augroup term
  autocmd!
  autocmd TermOpen * set nonumber norelativenumber
  augroup END

endif

"------------------- END TERMINAL ---------------------------------------
