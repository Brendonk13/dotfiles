
function! MarkWindowSwap()
  let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
  "Mark destination
  let curNum = winnr()
  let curBuf = bufnr( "%" )
  exe g:markedWinNum . "wincmd w"
  "Switch to source and shuffle dest->source
  let markedBuf = bufnr( "%" )
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' curBuf
  "Switch to dest and shuffle source->dest
  exe curNum . "wincmd w"
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' markedBuf 
endfunction

" these functions come from https://stackoverflow.com/questions/2586984/how-can-i-swap-positions-of-two-open-files-in-splits-in-vim/4903681#4903681
nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>



"from: https://stackoverflow.com/questions/44480829/how-to-copy-to-clipboard-in-vim-of-bash-on-windows
" just calls the native windows clip.exe function nice n simple
"func! GetSelectedText()
"  normal gv"+y
"  "let result = getreg("x")
"  "return result
"endfunc

if has('clipboard')
  nnoremap <leader>y :normal gv"+y<CR>
  vnoremap <leader>y :normal gv"+y<CR>
endif

"if !has("clipboard") && executable("clip.exe") <- og, didn't work sometimes...
"if executable("xclip")
"  noremap <leader>y :call system('xclip', GetSelectedText())<CR>
"  " could/should add a cut command but who cares
"  "noremap <C-X> :call system('clip.exe', GetSelectedText())<CR>gvx
"endif

" I would like to add a command that calls isort on my python files upon exiting them -- maybe this is overkill tho 




let g:opened_neoterm = 0

function! ToggleDropDownNeoterm()
  if g:opened_neoterm
    redir => neoterm_win_num
      silent! execute "filter /neoterm/ ls"
    redir END
    "echom neoterm_win_num[3]
    redir => neoterm_win_height
      silent! execute "echo" . winheight(neoterm_win_num[3])
    redir END

    " set so next toggle opens to currents "drop down" window's height
    let g:neoterm_size = substitute(neoterm_win_height, '^\n', '', '')
    "echom g:neoterm_size
    let g:opened_neoterm = 0
    Tclose
  else
    let g:opened_neoterm = 1
    Topen
  endif
endfunction



" when in a neovim terminal, add a buffer to the existing vim session
" instead of nesting (credit justinmk)
autocmd VimEnter * if !empty($NVIM_LISTEN_ADDRESS) && $NVIM_LISTEN_ADDRESS !=# v:servername
  \ |let g:r=jobstart(['nc', '-U', $NVIM_LISTEN_ADDRESS],{'rpc':v:true})
  \ |let g:f=fnameescape(expand('%:p'))
  \ |noau bwipe
  \ |call rpcrequest(g:r, "nvim_command", "edit ".g:f)
  \ |call rpcrequest(g:r, "nvim_command", "call lib#SetNumberDisplay()")
  \ |qa
  \ |endif
