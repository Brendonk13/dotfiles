
" note that I can edit the function! neoterm#repl#selection() in  neoterm/autoload/neoterm/repl.vim
" to make it add backspaces to new lines in python code when visually selected easily.
" described more in Pystuff/python_ideas/how_improve_neoterm.txt

" let g:comfortable_motion_friction = 150.0
" let g:comfortable_motion_air_drag = 0.5
" 
" noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
" noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>
" 
" let g:comfortable_motion_impulse_multiplier = 1  " Feel free to increase/decrease this value.
" nnoremap <silent> <C-d> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
" nnoremap <silent> <C-u> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>
" nnoremap <silent> <C-f> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 4)<CR>
" nnoremap <silent> <C-b> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0)

let g:black_virtualenv="~/.vim_black"

" this is for vim-signify
set updatetime=256

nmap <leader>tc <Plug>Colorizer

" doesn't work for terminal anyways
let g:qs_buftype_blacklist = ['terminal']

" don't quick_scope for long lines
let g:qs_max_chars=100
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

augroup qs_colors
  autocmd!
  autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
  autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
augroup END



" config for lightline, can do hella customization, explained on  https://github.com/itchyny/lightline.vim#solarized-light
" was wombat
let g:lightline = {
   \ 'colorscheme': 'solarized',
   \ 'separator': { 'left': '', 'right': '' },
   \ 'subseparator': { 'left': '', 'right': '' },
   \ 'active' : {
   \   'left': [ [ 'mode', 'paste' ],
   \           [ 'myfilename',  'readonly', 'modified' ] ],
   \   'right': [ [ 'lineinfo' ],
   \            [ 'percent' ],
   \            [ 'filetype' ] ]
   \ },
   \ 'inactive' : {
   \    'right' : [ [ 'modified' ] ]
   \ },
   \ 'component_function': {
   \       'readonly': 'LightlineReadOnly',
   \       'filetype': 'LightlineFileType',
   \       'percent': 'LightlinePercent',
   \       'modified': 'LightlineModified',
   \       'myfilename': 'LightlineFileName',
   \ },
   \ 'component_expand': {
   \       'session' : 'GetObsessionStatus'
   \ },
   \ 'component': {
   \       'lineinfo': '%3l:%-2v' . '←c'
   \ },
   \ 'tabline': {
   \        'left': [ [ 'tabs' ] ],
   \        'right': [ [ 'session' ] ]
   \ }
\ }

" don't care if files are modified in tabs
let g:lightline.tab = {
    \ 'active':   [ 'tabnum', 'filename', 'session' ],
    \ 'inactive': [ 'tabnum', 'filename' ]
\ }

function! GetObsessionStatus()
    return '%{ObsessionStatus()}'
endfunction

" deleted this and moved to inside the big g:lightline
" don't want that close sign showing
" let g:lightline.tabline = {
"    \ 'left': [ [ 'tabs' ] ],
"    \ 'right': [ [ '' ] ] 
" \ }


function! LightlineReadOnly()
   return &readonly ? 'RO ' : ''
endfunction

function! LightlineFileName()
    return winwidth(0) < 44 ? expand('%:t:r') : expand('%:t')
endfunction

function! LightlineModified()
    return &modifiable && &modified ? '+' : ''
endfunction

function! LightlinePercent()
    " don't show percent if no space under these conditions
    " because here we have &R.O or '+' taking up space already
    if winwidth(0) < 60
        return ''
    endif

    let file_name = expand('%:t:r')

    " don't show file names if its just a terminal!
    if file_name =~# 'bash'
        return ''
    endif

    let above = line('w0') - 1
    let below = line('$') - line('w$')
    if below <= 0
        return above ? 'Bot' : 'All'
    elseif above <= 0
        return 'Top'
    else
        return printf('%2d%%', above > 1000000 ?
                \ above / ((above + below) / 100) :
                \ above * 100 / (above + below))
    endif
endfunction


" not being used currently
function! LightlineFileType()
   return ''
    " don't show filetype if window < 55
   "return winwidth(0) > 62 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction


" this deletes the colored line at tabline//below active window

let s:palette = g:lightline#colorscheme#{g:lightline.colorscheme}#palette
let s:palette.tabline.middle = [ [ 'NONE', 'NONE', 'NONE', 'NONE' ] ]

" let s:palette.normal.middle = [ [ 'NONE', 'NONE', 'NONE', 'NONE' ] ]
" let s:palette.inactive.middle = [ [ 'NONE', 'NONE', 'NONE', 'NONE' ] ]


" note winfixheight option used by neoterm_fixedsize
" let g:neoterm_term_per_tab = 1
" let g:neoterm_autoinsert = 1
" let g:neoterm_fixedsize = 1
let g:neoterm_autoscroll = '1'
let g:neoterm_default_mod = 'botright'
let g:neoterm_size = 11

let g:fzf_action = {
   \ 'ctrl-t': 'tab split',
   \ 'ctrl-s': 'split',
   \ 'ctrl-v': 'vsplit' }

let g:limelight_default_coefficient = 0.3


" NOTE: much easier to just align using regex than adding a delimeter.

" EasyAlign /->/

let g:easy_align_delimiters = {
  \ ';': { 'pattern': ';', 'left_margin': 0, 'stick_to_left': 1 } }


function! SetupCommandAbbrs(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction

" Use C to open coc config
call SetupCommandAbbrs('C', 'CocConfig')



" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> S 0<Plug>(coc-range-select)
xmap <silent> S 0<Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>


function! MyFoldText()
    let line = getline(v:foldstart)
    let folded_line_num = v:foldend - v:foldstart
    let line_text = substitute(line, '^"{\+', '', 'g')
    let fillcharcount = &textwidth - len(line_text) - len(folded_line_num)
    return '++  '. repeat('-', 2) . '  ' . line_text . '  ' . repeat('-', fillcharcount) . '  (' . folded_line_num . ' L)  '
endfunction


" hi Folded ctermfg=White guibg=None
set foldtext=MyFoldText()

let g:UltiSnipsExpandTrigger='<C-Space>'
